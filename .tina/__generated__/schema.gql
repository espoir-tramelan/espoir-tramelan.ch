# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  souvenirs(relativePath: String): Souvenirs!
  souvenirsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: SouvenirsFilter): SouvenirsConnection!
  camps(relativePath: String): Camps!
  campsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: CampsFilter): CampsConnection!
  pages(relativePath: String): Pages!
  pagesConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PagesFilter): PagesConnection!
  faq(relativePath: String): Faq!
  faqConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: FaqFilter): FaqConnection!
}

input DocumentFilter {
  souvenirs: SouvenirsFilter
  camps: CampsFilter
  pages: PagesFilter
  faq: FaqFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter): DocumentConnection!
}

union DocumentNode = Souvenirs | Camps | Pages | Faq

type Souvenirs implements Node & Document {
  body: JSON
  title: String
  teaser: String
  location: String
  startdate: String
  enddate: String
  banner: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input DatetimeFilter {
  after: String
  before: String
  eq: String
  exists: Boolean
  in: [String]
}

input SouvenirsFilter {
  body: RichTextFilter
  title: StringFilter
  teaser: StringFilter
  location: StringFilter
  startdate: DatetimeFilter
  enddate: DatetimeFilter
  banner: StringFilter
}

type SouvenirsConnectionEdges {
  cursor: String!
  node: Souvenirs
}

type SouvenirsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [SouvenirsConnectionEdges]
}

type Camps implements Node & Document {
  body: JSON
  title: String
  date: String
  open: Boolean
  full: Boolean
  startdate: String
  enddate: String
  ensavoirplus: String
  form: String
  location: String
  locationlink: String
  teaser: String
  age: String
  price: String
  banner: String
  responsable: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input BooleanFilter {
  eq: Boolean
  exists: Boolean
}

input CampsFilter {
  body: RichTextFilter
  title: StringFilter
  date: DatetimeFilter
  open: BooleanFilter
  full: BooleanFilter
  startdate: StringFilter
  enddate: StringFilter
  ensavoirplus: StringFilter
  form: StringFilter
  location: StringFilter
  locationlink: StringFilter
  teaser: StringFilter
  age: StringFilter
  price: StringFilter
  banner: StringFilter
  responsable: StringFilter
}

type CampsConnectionEdges {
  cursor: String!
  node: Camps
}

type CampsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [CampsConnectionEdges]
}

type Pages implements Node & Document {
  body: JSON
  videolink: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input PagesFilter {
  body: RichTextFilter
  videolink: StringFilter
}

type PagesConnectionEdges {
  cursor: String!
  node: Pages
}

type PagesConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PagesConnectionEdges]
}

type Faq implements Node & Document {
  body: JSON
  title: String
  date: String
  shortanswer: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input FaqFilter {
  body: RichTextFilter
  title: StringFilter
  date: DatetimeFilter
  shortanswer: StringFilter
}

type FaqConnectionEdges {
  cursor: String!
  node: Faq
}

type FaqConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [FaqConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updateSouvenirs(relativePath: String!, params: SouvenirsMutation!): Souvenirs!
  createSouvenirs(relativePath: String!, params: SouvenirsMutation!): Souvenirs!
  updateCamps(relativePath: String!, params: CampsMutation!): Camps!
  createCamps(relativePath: String!, params: CampsMutation!): Camps!
  updatePages(relativePath: String!, params: PagesMutation!): Pages!
  createPages(relativePath: String!, params: PagesMutation!): Pages!
  updateFaq(relativePath: String!, params: FaqMutation!): Faq!
  createFaq(relativePath: String!, params: FaqMutation!): Faq!
}

input DocumentUpdateMutation {
  souvenirs: SouvenirsMutation
  camps: CampsMutation
  pages: PagesMutation
  faq: FaqMutation
  relativePath: String
}

input DocumentMutation {
  souvenirs: SouvenirsMutation
  camps: CampsMutation
  pages: PagesMutation
  faq: FaqMutation
}

input SouvenirsMutation {
  body: JSON
  title: String
  teaser: String
  location: String
  startdate: String
  enddate: String
  banner: String
}

input CampsMutation {
  body: JSON
  title: String
  date: String
  open: Boolean
  full: Boolean
  startdate: String
  enddate: String
  ensavoirplus: String
  form: String
  location: String
  locationlink: String
  teaser: String
  age: String
  price: String
  banner: String
  responsable: String
}

input PagesMutation {
  body: JSON
  videolink: String
}

input FaqMutation {
  body: JSON
  title: String
  date: String
  shortanswer: String
}

schema {
  query: Query
  mutation: Mutation
}
  